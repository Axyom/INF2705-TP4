Indice: pour bien répondre à ces deux questions, essayez de voir si votre réponse fonctionne dans votre application. (Pour chacune, ce ne sont que quelques lignes à modifier dans le nuanceur!)


Q1: Dans la partie 1, des points de taille fixe sont affichés à l'écran. Leur taille est donnée par la variable gl_PointSize.
    i) Comment faire pour que la taille d'un point varie de façon inverse à sa distance du plan avant du volume de visualisation, c'est-à-dire qu'il soit plus gros lorsqu'il est plus près de la caméra ?
    On sait que dans le repere de la projection, la coordonnee z d'un vertex correspond a moins (-) sa distance normalisee avec le plan avant de la camera.
    Ainsi, il suffit de multiplier l'inverse de la negation de cette quantite au pointsize initial pour faire varier la taille des points en fonction de leur distance au plan avant de la camera.
    ii) Donnez l'énoncé GLSL que vous utiliseriez pour implanter ceci.
    gl_PointSize = -pointsize/((matrProj * matrVisu * matrModel * Vertex).z);


Q2: Pour afficher une étincelle qui tourne sur elle-même, on a appliqué une matrice de rotation sur les quatre sommets.
    i) Pourrait-on faire tourner l'étincelle en appliquant la même matrice de rotation sur les coordonnées de texture plutôt que sur les coordonnées des sommets?
    Oui, cela est possible mais il faut faire attention a centrer les coordonnees autour de 0.
    ii) Quel problème observerions-nous alors et comment devrait-il être corrigé?
    il faut faire attention a centrer les coordonnees autour de 0. On utilise l'enonce glsl suivant:
    // rotation des coordonnees de texture
	AttribsOut.texCoord = coins[i] + vec2( 0.5, 0.5 ); // (1) la coordonnee de texture initiale 
	AttribsOut.texCoord -= vec2( 0.5, 0.5 ); // (2) on centre autour de 0
	AttribsOut.texCoord = texRot * AttribsOut.texCoord; // (3) on effectue la rotation
	AttribsOut.texCoord += vec2( 0.5, 0.5 ); // (4) on effectue la translation inverse a l'etape (2)

    Afin de facilement répondre à cette question, vous pouvez remplacer (temporairement!) l'image de l'étincelle de ce TP par l'image de l'échiquier du TP3.  Si vous appliquez ensuite la matrice de rotation sur les coordonnées de texture plutôt que sur les coordonnées des sommets, vous pourrez alors très bien voir ce qui se passe.
